#! /usr/bin/env python
#
# Copyright (Â©) 2015, Quentin Stafford-Fraser
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
#
# Remove wildcard and generic import statements from Python code.
#
# For example, the following:
#
# | from numpy import *
# | import functools
# | import abc
# | import string
#
# is converted to:
#
# | from numpy import array, tensordot
# | from functools import reduce, wraps
# | from abc import abstractmethod
# | from string import punctuation
#
# if in the input sourcefile you use functions verbosely, as in
#
# | numpy.array(...)
# | functools.reduce(...)
#
# it will replace them in your import statement block with the aforementioned
# lines, as well as in your code with `array(...)`, `reduce(...)`, etc.
# 


import argparse
import importlib
import re
import sys


_description = """Replace wildcard and generic import statements with
specific `from [package] import [modules|functions|etc.]`
"""


import_all_re = re.compile(r'^\s*from\s*([\w.]*)\s*import\s*[*]')


def import_all_string(module_name, single_line: bool) -> :
    importlib.import_module(module_name)
    
    if single_line:
        import_line = 'from %s import %%s\n' % module_name
        length = 0
        separator = ', '
    else:
        import_line = 'from %s import ( %%s )\n' % module_name
        length = len(import_line) - 5
        separator = ',\n'

    return import_line % (separator + length * ' ').join(
        [a for a in dir(sys.modules[module_name]) if not a.startswith('_')])


def switch(args: argparse.Namespace) -> None:
    """
    
    """
    for line in sys.stdin:
        match = import_all_re.match(line)
        if match:
            line = import_all_string(match.group(1), arguments.single_line)
        sys.stdout.write(line)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=_description)

    parser.add_argument('input', type=str, 
      help='Name of input Python file'
    )

    parser.add_argument('output', type=str,
      help='Name of output Python file (defaults to inputfile_dewildcarded.py)'
    )
    
    parser.add_argument('--single-line', action='store_true',
      help='Write imports on a single line'
    )

    parser.add_argument('--ignore-modules', type=list,
      help='Imported modules to ignore (i.e. you wish to keep their verbosity)'
           'for readability)'
    )

    parser.add_argument('--non-global', action='store_true',
      help='Parse also non-global import statements throughout the file'
    )

    args = parser.parse_args()

    switch(args)
